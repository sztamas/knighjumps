// Generated by CoffeeScript 1.6.3
(function() {
  var Board, BoardView, FILES, KNIGHT_IMG, SHOW_PATHS_FOR, Square, displayBoardWithKnightOn, relMouseCoords,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FILES = 'abcdefgh';

  SHOW_PATHS_FOR = 2000;

  Square = (function() {
    function Square(coord) {
      this.coord = coord;
      this.file = coord[0];
      this.fileIdx = FILES.indexOf(this.file);
      this.rank = parseInt(coord[1]);
      this.rankIdx = this.rank - 1;
    }

    Square.prototype.color = function() {
      if (this.fileIdx % 2 === this.rank % 2) {
        return 'light';
      } else {
        return 'dark';
      }
    };

    Square.prototype.isLight = function() {
      return this.color() === 'light';
    };

    Square.prototype.isDark = function() {
      return this.color() === 'dark';
    };

    return Square;

  })();

  Board = (function() {
    function Board(knightSquare) {
      this.knightSquare = knightSquare;
      this.squares = this.initSquares;
    }

    Board.prototype.initSquares = function() {
      var file, rank, ranks, squares, _i, _j, _len, _len1;
      squares = [];
      ranks = [1, 2, 3, 4, 5, 6, 7, 8];
      for (_i = 0, _len = ranks.length; _i < _len; _i++) {
        rank = ranks[_i];
        for (_j = 0, _len1 = FILES.length; _j < _len1; _j++) {
          file = FILES[_j];
          squares.push(new Square(file + rank));
        }
      }
      return squares;
    };

    Board.prototype.allKnightMoves = function(from) {
      var coord, coords, distance, result, validCoords;
      result = [];
      coords = (function() {
        var _i, _len, _ref, _results;
        _ref = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          distance = _ref[_i];
          _results.push([from.fileIdx + distance[0], from.rank + distance[1]]);
        }
        return _results;
      })();
      validCoords = (function() {
        var _i, _len, _ref, _ref1, _results;
        _results = [];
        for (_i = 0, _len = coords.length; _i < _len; _i++) {
          coord = coords[_i];
          if ((0 <= (_ref = coord[0]) && _ref < 8) && (0 < (_ref1 = coord[1]) && _ref1 <= 8)) {
            _results.push(FILES[coord[0]] + coord[1]);
          }
        }
        return _results;
      })();
      return validCoords;
    };

    Board.prototype.calculateHopNumbers = function() {
      var coord, hopNo, hopNumbers, lastPos, length, step, _i, _j, _len, _len1, _ref, _ref1;
      hopNumbers = {};
      hopNumbers[this.knightSquare.coord] = 0;
      length = function(m) {
        var k, v;
        return ((function() {
          var _results;
          _results = [];
          for (k in hopNumbers) {
            v = hopNumbers[k];
            _results.push(k);
          }
          return _results;
        })()).length;
      };
      step = 1;
      while (length(hopNumbers) < 64) {
        _ref = (function() {
          var _results;
          _results = [];
          for (coord in hopNumbers) {
            hopNo = hopNumbers[coord];
            if (hopNo === step - 1) {
              _results.push(coord);
            }
          }
          return _results;
        })();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          lastPos = _ref[_i];
          _ref1 = this.allKnightMoves(new Square(lastPos));
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            coord = _ref1[_j];
            if (!(coord in hopNumbers)) {
              hopNumbers[coord] = step;
            }
          }
        }
        step += 1;
      }
      return hopNumbers;
    };

    Board.prototype.calculatePaths = function(to) {
      var coord, endPointReached, newPath, newPaths, path, paths, _i, _j, _len, _len1, _ref;
      paths = [[this.knightSquare]];
      endPointReached = false;
      while (!endPointReached) {
        newPaths = [];
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          path = paths[_i];
          _ref = this.allKnightMoves(path[path.length - 1]);
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            coord = _ref[_j];
            newPath = path.slice(0);
            newPath.push(new Square(coord));
            newPaths.push(newPath);
            if (to === coord) {
              endPointReached = true;
            }
          }
        }
        paths = newPaths;
      }
      return (function() {
        var _k, _len2, _results;
        _results = [];
        for (_k = 0, _len2 = paths.length; _k < _len2; _k++) {
          path = paths[_k];
          if (path[path.length - 1].coord === to) {
            _results.push(path);
          }
        }
        return _results;
      })();
    };

    return Board;

  })();

  BoardView = (function() {
    function BoardView(elementId, board) {
      this.onMouseUp = __bind(this.onMouseUp, this);
      this.onMouseMove = __bind(this.onMouseMove, this);
      this.onMouseDown = __bind(this.onMouseDown, this);
      this.incPathToShowIdx = __bind(this.incPathToShowIdx, this);
      this.draw = __bind(this.draw, this);
      this.board = board;
      this.canvas = document.getElementById(elementId);
      this.canvas.onmousedown = this.onMouseDown;
      this.canvas.onmouseup = this.onMouseUp;
      this.context = this.canvas.getContext('2d');
      this.colorscheme = {
        DARK_SQUARE: '#a65400',
        LIGHT_SQUARE: '#ffbf73',
        COORD_TEXT: 'darkgrey'
      };
      this.showCoordinates = false;
      this.fontFamily = 'Sanchez';
      this.image = KNIGHT_IMG;
      this.showingPaths = false;
      this.pathsToShowIdx = -1;
    }

    BoardView.prototype.color = function(type) {
      return this.colorscheme[type];
    };

    BoardView.prototype.squareSize = function() {
      return Math.min(this.canvas.height, this.canvas.width) / 8;
    };

    BoardView.prototype.drawSquare = function(square) {
      var margin, squareColor, squareSize;
      squareSize = this.squareSize();
      squareColor = square.isLight() ? 'LIGHT_SQUARE' : 'DARK_SQUARE';
      this.context.fillStyle = this.color(squareColor);
      this.context.fillRect(square.fileIdx * squareSize, (8 - square.rank) * squareSize, squareSize, squareSize);
      if (this.showCoordinates) {
        this.context.fillStyle = this.color("COORD_TEXT");
        this.context.textAlign = "left";
        this.context.textBaseline = "bottom";
        this.context.font = "12px Colibri";
        margin = 2;
        return this.context.fillText(square.coord, square.fileIdx * squareSize + margin, (9 - square.rank) * squareSize - margin);
      }
    };

    BoardView.prototype.clear = function() {
      return this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
    };

    BoardView.prototype.draw = function() {
      this.clear();
      this.drawBoard();
      this.drawHopNumbers(this.board.calculateHopNumbers());
      this.drawKnight();
      if (this.showingPaths) {
        if (!this.pathsDrawnAt || this.pathsDrawnAt < (new Date() - SHOW_PATHS_FOR)) {
          this.pathsDrawnAt = new Date() - 0;
          this.incPathToShowIdx();
        }
        if (this.pathsToShowIdx === -1) {
          this.drawPaths(this.pathsToShow);
        } else {
          this.drawPaths(this.pathsToShow.slice(this.pathsToShowIdx, +this.pathsToShowIdx + 1 || 9e9));
        }
      }
      if (this.dragging || this.showingPaths) {
        return setTimeout(this.draw, 10);
      }
    };

    BoardView.prototype.incPathToShowIdx = function() {
      this.pathsToShowIdx += 1;
      if (this.pathsToShowIdx >= this.pathsToShow.length) {
        return this.pathsToShowIdx = -1;
      }
    };

    BoardView.prototype.drawPaths = function(paths) {
      var path, prev, square, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        prev = path[0];
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = path.slice(1);
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            square = _ref[_j];
            this.drawLine(prev, square, "rgba(10, 133, 62, .6)");
            _results1.push(prev = square);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    BoardView.prototype.squareCentre = function(square) {
      var half, squareSize;
      squareSize = this.squareSize();
      half = squareSize / 2;
      return {
        x: square.fileIdx * squareSize + half,
        y: (8 - square.rank) * squareSize + half
      };
    };

    BoardView.prototype.drawLine = function(from, to, color) {
      var endPoint, startPoint;
      startPoint = this.squareCentre(from);
      endPoint = this.squareCentre(to);
      this.context.lineWidth = 8;
      this.context.strokeStyle = color;
      this.context.fillStyle = color;
      return drawArrow(this.context, startPoint.x, startPoint.y, endPoint.x, endPoint.y, 1, 1, Math.PI / 8, 25);
    };

    BoardView.prototype.drawBoard = function() {
      var square, _i, _len, _ref, _results;
      _ref = this.board.squares();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        square = _ref[_i];
        _results.push(this.drawSquare(square));
      }
      return _results;
    };

    BoardView.prototype.drawKnight = function() {
      var half, knightSquare, squareSize, x, y;
      squareSize = this.squareSize();
      half = Math.floor(squareSize / 2);
      if (this.dragging && this.mouseCoords) {
        x = Math.max(0, this.mouseCoords.x - half);
        y = Math.max(0, this.mouseCoords.y - half);
        this.context.drawImage(this.image, x, y, squareSize, squareSize);
        return;
      }
      knightSquare = this.board.knightSquare;
      return this.context.drawImage(this.image, squareSize * knightSquare.fileIdx, squareSize * (8 - knightSquare.rank), squareSize, squareSize);
    };

    BoardView.prototype.drawHopNumbers = function(hopNumbers) {
      var hopNo, squareCoord, _results;
      _results = [];
      for (squareCoord in hopNumbers) {
        hopNo = hopNumbers[squareCoord];
        if (hopNo > 0) {
          _results.push(this.drawHopNumber(new Square(squareCoord), hopNo));
        }
      }
      return _results;
    };

    BoardView.prototype.drawHopNumber = function(square, hopNo) {
      var halfSquare, size, squareSize;
      this.context.textAlign = "center";
      this.context.textBaseline = "middle";
      if (square.isLight()) {
        this.context.fillStyle = "#7d2c17";
      } else {
        this.context.fillStyle = "darkgrey";
      }
      squareSize = this.squareSize();
      halfSquare = squareSize / 2;
      size = Math.floor(squareSize / 2);
      this.context.font = size + ("px '" + this.fontFamily + "'");
      return this.context.fillText(hopNo.toString(), square.fileIdx * squareSize + halfSquare, (8 - square.rank) * squareSize + halfSquare);
    };

    BoardView.prototype.coordsToSquare = function(coords) {
      var fileIdx, rank, squareSize;
      squareSize = this.squareSize();
      fileIdx = Math.floor(coords.x / squareSize);
      rank = 8 - Math.floor(coords.y / squareSize);
      return new Square(FILES[fileIdx] + rank);
    };

    BoardView.prototype.onMouseDown = function(event) {
      var coords, square;
      coords = this.canvas.relMouseCoords(event);
      square = this.coordsToSquare(coords);
      if (square.coord === this.board.knightSquare.coord) {
        this.dragging = true;
        this.canvas.onmousemove = this.onMouseMove;
        this.mouseCoords = this.coords;
      } else {
        this.pathsToShowIdx = -2;
        this.pathsToShow = this.board.calculatePaths(square.coord);
        this.showingPaths = true;
      }
      return setTimeout(this.draw, 10);
    };

    BoardView.prototype.onMouseMove = function(event) {
      if (this.dragging) {
        return this.mouseCoords = this.canvas.relMouseCoords(event);
      }
    };

    BoardView.prototype.onMouseUp = function(event) {
      var coords, square;
      if (this.dragging) {
        coords = this.canvas.relMouseCoords(event);
        square = this.coordsToSquare(coords);
        this.board.knightSquare = square;
      }
      this.dragging = false;
      this.showingPaths = false;
      this.pathsDrawnAt = null;
      return this.canvas.onmousemove = null;
    };

    return BoardView;

  })();

  relMouseCoords = function(event) {
    var canvasX, canvasY, currentElement, totalOffsetX, totalOffsetY;
    totalOffsetX = 0;
    totalOffsetY = 0;
    canvasX = 0;
    canvasY = 0;
    currentElement = this;
    totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
    totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    while (currentElement === currentElement.offsetParent) {
      totalOffsetX += currentElement.offsetLeft - currentElement.scrollLeft;
      totalOffsetY += currentElement.offsetTop - currentElement.scrollTop;
    }
    canvasX = event.pageX - totalOffsetX;
    canvasY = event.pageY - totalOffsetY;
    return {
      x: canvasX,
      y: canvasY
    };
  };

  HTMLCanvasElement.prototype.relMouseCoords = relMouseCoords;

  displayBoardWithKnightOn = function(knightCoord) {
    var board, view;
    board = new Board(new Square(knightCoord));
    view = new BoardView('myCanvas', board);
    view.draw();
    return setTimeout(view.draw, 10);
  };

  KNIGHT_IMG = new Image();

  KNIGHT_IMG.src = 'img/wknight.png';

  window.main = function() {
    return displayBoardWithKnightOn('e4');
  };

}).call(this);
